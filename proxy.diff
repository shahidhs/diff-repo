diff --git a/Makefile b/Makefile
index c8754ad6..bbef108e 100644
--- a/Makefile
+++ b/Makefile
@@ -39,6 +39,8 @@ IMAGE_VERSION ?= master-2020-03-05T18-27-04
 LOCAL_ARCH := $(shell uname -m)
 ifeq ($(LOCAL_ARCH),x86_64)
     TARGET_ARCH ?= amd64
+else ifeq ($(LOCAL_ARCH),s390x)
+    TARGET_ARCH ?= s390x
 else ifeq ($(shell echo $(LOCAL_ARCH) | head -c 5),armv8)
     TARGET_ARCH ?= arm64
 else ifeq ($(LOCAL_ARCH),aarch64)
@@ -61,7 +63,7 @@ else
 endif
 
 export TARGET_OUT ?= $(shell pwd)/out/$(TARGET_OS)_$(TARGET_ARCH)
-export TARGET_OUT_LINUX ?= $(shell pwd)/out/linux_amd64
+export TARGET_OUT_LINUX ?= $(shell pwd)/out/linux_s390x
 
 ifeq ($(BUILD_WITH_CONTAINER),1)
 export TARGET_OUT = /work/out/$(TARGET_OS)_$(TARGET_ARCH)
diff --git a/Makefile.core.mk b/Makefile.core.mk
index c8c79f35..a59669ca 100644
--- a/Makefile.core.mk
+++ b/Makefile.core.mk
@@ -65,7 +65,7 @@ BAZEL_OUTPUT_PATH = $(shell bazel info $(BAZEL_BUILD_ARGS) output_path)
 BAZEL_ENVOY_PATH ?= $(BAZEL_OUTPUT_PATH)/k8-fastbuild/bin/src/envoy/envoy
 
 build:
-	export PATH=$(PATH) CC=$(CC) CXX=$(CXX) && bazel $(BAZEL_STARTUP_ARGS) build $(BAZEL_BUILD_ARGS) $(BAZEL_CONFIG_DEV) $(BAZEL_TARGETS)
+	export PATH=$(PATH) CC=$(CC) CXX=$(CXX) && bazel $(BAZEL_STARTUP_ARGS) build $(BAZEL_BUILD_ARGS) $(BAZEL_CONFIG_DEV) $(BAZEL_TARGETS) --copt=-Wno-error=type-limits
 
 build_envoy:
 	export PATH=$(PATH) CC=$(CC) CXX=$(CXX) && bazel $(BAZEL_STARTUP_ARGS) build $(BAZEL_BUILD_ARGS) $(BAZEL_CONFIG_REL) //src/envoy:envoy
diff --git a/WORKSPACE b/WORKSPACE
index 9bcb0849..1a0e80d2 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -20,7 +20,7 @@ workspace(name = "io_istio_proxy")
 load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive", "http_file")
 load(
     "//:repositories.bzl",
-    "docker_dependencies",
+#    "docker_dependencies",
     "googletest_repositories",
     "mixerapi_dependencies",
 )
@@ -33,6 +33,14 @@ bind(
     name = "boringssl_crypto",
     actual = "//external:ssl",
 )
+local_repository(
+     name = "boringssl",
+     path = "$SOURCE_ROOT/boringssl",
+)
+bind(
+     name = "ssl",
+     actual = "@boringssl//:ssl",
+)
 
 # 1. Determine SHA256 `wget https://github.com/istio/envoy/archive/$COMMIT.tar.gz && sha256sum $COMMIT.tar.gz`
 # 2. Update .bazelversion, envoy.bazelrc and .bazelrc if needed.
@@ -50,11 +58,9 @@ ENVOY_REPO = "envoy"
 
 # To override with local envoy, just pass `--override_repository=envoy=/PATH/TO/ENVOY` to Bazel or
 # persist the option in `user.bazelrc`.
-http_archive(
+local_repository (
     name = ENVOY_REPO,
-    sha256 = ENVOY_SHA256,
-    strip_prefix = ENVOY_REPO + "-" + ENVOY_SHA,
-    url = "https://github.com/" + ENVOY_ORG + "/" + ENVOY_REPO + "/archive/" + ENVOY_SHA + ".tar.gz",
+    path = "$SOURCE_ROOT/envoy",
 )
 
 load("@envoy//bazel:api_binding.bzl", "envoy_api_binding")
@@ -76,46 +82,46 @@ envoy_dependency_imports()
 load("@rules_antlr//antlr:deps.bzl", "antlr_dependencies")
 
 antlr_dependencies(471)
-
-# Docker dependencies
-
-docker_dependencies()
-
-load(
-    "@io_bazel_rules_docker//repositories:repositories.bzl",
-    container_repositories = "repositories",
-)
-
-container_repositories()
-
-load("@io_bazel_rules_docker//repositories:deps.bzl", container_deps = "deps")
-
-container_deps()
-
-load(
-    "@io_bazel_rules_docker//container:container.bzl",
-    "container_pull",
-)
-
-container_pull(
-    name = "distroless_cc",
-    # Latest as of 10/21/2019. To update, remove this line, re-build, and copy the suggested digest.
-    digest = "sha256:86f16733f25964c40dcd34edf14339ddbb2287af2f7c9dfad88f0366723c00d7",
-    registry = "gcr.io",
-    repository = "distroless/cc",
-)
-
-container_pull(
-    name = "bionic",
-    # Latest as of 10/21/2019. To update, remove this line, re-build, and copy the suggested digest.
-    digest = "sha256:3e83eca7870ee14a03b8026660e71ba761e6919b6982fb920d10254688a363d4",
-    registry = "index.docker.io",
-    repository = "library/ubuntu",
-    tag = "bionic",
-)
-
-# End of docker dependencies
-
+#
+## Docker dependencies
+#
+#docker_dependencies()
+#
+#load(
+#    "@io_bazel_rules_docker//repositories:repositories.bzl",
+#    container_repositories = "repositories",
+#)
+#
+#container_repositories()
+#
+#load("@io_bazel_rules_docker//repositories:deps.bzl", container_deps = "deps")
+#
+#container_deps()
+#
+#load(
+#    "@io_bazel_rules_docker//container:container.bzl",
+#    "container_pull",
+#)
+#
+#container_pull(
+#    name = "distroless_cc",
+#    # Latest as of 10/21/2019. To update, remove this line, re-build, and copy the suggested digest.
+#    digest = "sha256:86f16733f25964c40dcd34edf14339ddbb2287af2f7c9dfad88f0366723c00d7",
+#    registry = "gcr.io",
+#    repository = "distroless/cc",
+#)
+#
+#container_pull(
+#    name = "bionic",
+#    # Latest as of 10/21/2019. To update, remove this line, re-build, and copy the suggested digest.
+#    digest = "sha256:3e83eca7870ee14a03b8026660e71ba761e6919b6982fb920d10254688a363d4",
+#    registry = "index.docker.io",
+#    repository = "library/ubuntu",
+#    tag = "bionic",
+#)
+#
+## End of docker dependencies
+#
 FLAT_BUFFERS_SHA = "a83caf5910644ba1c421c002ef68e42f21c15f9f"
 
 http_archive(
diff --git a/envoy.bazelrc b/envoy.bazelrc
index f1c01584..84c5a6ef 100644
--- a/envoy.bazelrc
+++ b/envoy.bazelrc
@@ -16,8 +16,8 @@ build --experimental_strict_action_env=true
 build --host_force_python=PY2
 build --action_env=BAZEL_LINKLIBS=-l%:libstdc++.a
 build --action_env=BAZEL_LINKOPTS=-lm
-build --host_javabase=@bazel_tools//tools/jdk:remote_jdk11
-build --javabase=@bazel_tools//tools/jdk:remote_jdk11
+build --host_javabase=@local_jdk//:jdk
+build --javabase=@local_jdk//:jdk
 build --enable_platform_specific_config
 
 # Enable position independent code, this option is not supported on Windows and default on on macOS.
